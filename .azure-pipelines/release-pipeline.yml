# Release build script
#
# Uses the common build logic, but also gains capabilities related to releasing the product.

# Only trigger manually

trigger: none

pr: none

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    settings:
      skipBuildTagsForGitHubPullRequests: true
    # featureFlags:
      # autoBaseline: false
    sdl:
      baseline:
        baselineSet: default
        baselineFile: $(Build.SourcesDirectory)/.gdn/.gdnbaselines
      sourceAnalysisPool:
        name: 1ES-ABTT-Shared-Pool
        image: abtt-windows-2022
        os: windows
    pool:
      name: 1ES-ABTT-Shared-Pool
      image: abtt-ubuntu-2204
      os: linux
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: stage
      jobs:
      - job: job
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish VSIX'
            artifactName: azure-pipelines-vscode
            targetPath: $(Build.ArtifactStagingDirectory)

        steps:
        # release version should be correctly set in package.json
        - bash: |
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            echo "##vso[build.updatebuildnumber]${PACKAGE_VERSION}_release_${BUILD_BUILDID}"
            echo "$PACKAGE_VERSION" > version.txt
          displayName: Set version number of build

        # do all the normal build stuff
        - template: /.azure-pipelines/common-steps.yml@self

        # if the mini changelog is empty, complain
        - bash: |
            LINE_COUNT=$(cat minichangelog.txt | wc -l)
            if [ "$LINE_COUNT" -lt 3 ]; then
              echo Mini changelog is too short. Did you use the wrong version number in CHANGELOG.txt?
              exit 1
            fi
          displayName: Check for length of mini-changelog

        # create a GitHub Release
        - bash: |
            export npm_config_cache=$(Build.SourcesDirectory)/.azure-pipelines/github-release/npm-cache
            npm install
          displayName: Prepare to create GitHub Release
          workingDirectory: '$(Build.SourcesDirectory)/.azure-pipelines/github-release'

        - bash: |
            SCRIPT=.azure-pipelines/github-release/github-release.js
            VSIX=extension.vsix
            VERSION=$(node -p "require('./package.json').version")
            VSIX_SIGNATURE=extension.signature.p7s
            VSIX_MANIFEST=extension.manifest
            node $SCRIPT $VSIX $VERSION $GITHUB_TOKEN $VSIX_SIGNATURE $VSIX_MANIFEST
          displayName: Create GitHub Release
          env:
            GITHUB_TOKEN: $(GitHubSecret)
